%token : 터미널 항목을 사용하겠다고 알려준다.
         c로 컴파일 될 때 #define 문으로 변형된다.
         데이터 타입이 %union으로 되어 있을 경우 %token NUMBER 식으로 사용한다..
         대신에 %left, %right, %nonassoc(?)을 사용해도 된다
%type : 논터미널 항목의 데이터형을 알릴 때 사용한다
%nonassoc : 연속으로 (in a row) 나오면 runtime에 에러를 발생시킨다 
            %nonassoc은 동시에 사용하면 안된다
            %nonassoc '>' '<'
            이렇게 정의하면 
            exp1 < exp2 > exp3 같은식으로 사용하면 runtime error 발생
            
 
precedence : %left, %right, %nonassoc은 associativity와 precedence 둘 다 설정하는데 
             %precedence는 precedence만 설정한다 예) %precedence THEN %precedence ELSE -> 이렇게하면 ELSE에 우선순위가 있음
             
-------------------------------------------------------------------------------------------
left recursion vs right recursion
둘다 쓸수 있다. 웬만하면 left를 써라. right는 stack을 많이 먹는다

From Bison manual:

"Any kind of sequence can be defined using either left recursion or right recursion, but you should always use left recursion, because it can parse a sequence of any number of elements with bounded stack space. Right recursion uses up space on the Bison stack in proportion to the number of elements in the sequence, because all the elements must be shifted onto the stack before the rule can be applied even once. See The Bison Parser Algorithm, for further explanation of this."
